---
author: Gregory M. Kapfhammer
title: Programming is not software engineering
date: '2023-01-01'
date-format: YYYY
categories: [post, developer development, software engineering]
description: <em>What is the best way to teach software engineering?</em>
---

<span class="gist">At Allegheny College, a class of students and I are embarking
  on a developer development adventure as we take a hands-on approach to
  learning software engineering.</span> You can participate in our adventure by
reading the collaboratively published content on the [Developer
Development](https://developerdevelopment.com/) web site and joining our
[Developer Development Discord Server](https://discord.gg/aNfn8DNEMx). As part
of the software engineering class the students and I are reading and then
publishing an executive summary about selected articles from the following
online books:

- [Software Engineering at Google](https://abseil.io/resources/swe-book)
(abbreviated as **SE**): a compelling introduction to the processes and tools
used by engineers at Google.
- [Fuzzing Book](https://www.fuzzingbook.org/) (abbreviated as **FB**): a savvy,
code-focused introduction to the automated tools and techniques for generating
software tests.
- [Debugging Book](https://www.debuggingbook.org/) (abbreviated as **DB**): an
interactive introduction to automated methods for debugging and fixing programs.

The idea is that the **SE** book will help the students and I to learn the
*professional knowledge and skills* that we need to develop as developers while
the **FB** and **DB** books will equip us with the *technical knowledge and
skills* necessary for us to both understand how software engineering tools are
built and to build and apply our own software engineering tools.

In accordance with advice from well-known software engineers like [Addy
Osmani](https://addyosmani.com/), who recently published a blog post entitled
["Write about what you learn. It pushes you to understand topics
better."](https://addyosmani.com/blog/write-learn/), the students and I will be
writing a short précis about each of the articles in the [Developer Development
schedule](https://developerdevelopment.com/schedule/). Today's article, and the
subject of the remainder of this post, is the
[preface](https://abseil.io/resources/swe-book/html/pr01.html) of **SE**! This
précis is written from the perspective of an instructor who wants to effectively
teach undergraduates how to engineer software.

The preface of **SE** makes it clear that *programming* is not the same as
*software engineering* --- even though software engineering certainly involves
programming! The authors of **SE** make the compelling point that software is
different than programming due to the following organizational concerns:

- **Time and Change**: while focused on solving problems with software,
engineers must maintain software systems over long periods of time.

- **Scale and Growth**: all of the people within an organization who build and
use software must adapt in both a daily and long-term fashion.

- **Trade-offs and Costs**: bearing in mind that software and people are always
changing, and organization must make decisions informed by trade-offs.

{{< include /_gist.qmd >}}

::: {.callout-note appearance="simple"}

## Stay Connected

Are you interested in following along with the experiences that the students and
I have as we developer as developers in a software engineering course at
Allegheny College? If you are, then I hope that you will check out our
[Developer Development](https://developerdevelopment.com/) that features our
writing and offers status updates about our software engineering experiences and
also join our [Developer Development Discord
Server](https://discord.gg/aNfn8DNEMx). Finally, what do you think are the best
ways to organize effective software engineering education? Please
[contact](/contact/index.qmd) me with your tips!

:::

{{< include /_back-blog.qmd >}}
